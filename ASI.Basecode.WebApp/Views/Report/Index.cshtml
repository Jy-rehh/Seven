@section styles {
    <link rel="stylesheet" href="~/css/dashboard.css" />
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

}
@model ASI.Basecode.Services.ServiceModels.ExpenseDataModel

@{
    ViewData["Title"] = "Report";
}
<body>
    <div class="report-header2" style="gap: 10px; margin-top: 5%;">
        <select class="header-btn" data-toggle="modal" data-target="#reportModal" style="border-radius: 20px; font-weight: bold; width: 130px;">
            <option value="" enable selected>Report</option>
            <option value="" enable selected>Expense</option>
            <option value="" enable selected>Category</option>
            
        </select>
        <button class="header-btn" data-toggle="modal" data-target="#previewModal" onclick="loadPreviewContent()" style="outline: none;">Preview</button>
        <input type="date" class="header-input" id="dateStart" placeholder="Date Start" style="margin-left: 30%; width:fit-content; outline: none;" />
        <input type="date" class="header-input" id="dateEnd" placeholder="Date End" style="width:fit-content; outline: none;" />
        <select class="header-btn dropdown-toggle" id="Filter" name="Filter" style="outline: none; width: 130px;">
            <option value="" enable selected>Filter</option>
            @if (Model.CategoryViewModel != null && Model.CategoryViewModel.Any())
            {
                foreach (var category in Model.CategoryViewModel)
                {
                    <option value="@category.CategoryId">@category.Name</option>
                }
            }
        </select>
        <select class="header-btn dropdown-toggle" id="Sort" name="Sort" style="outline: none; width: 130px;">
            <option value="" enable selected>Sort by</option>
            <option value="titleAsc">Title (A-Z)</option>
            <option value="titleDesc">Title (Z-A)</option>
            <option value="amountAsc">Amount (Low to High)</option>
            <option value="amountDesc">Amount (High to Low)</option>
            <option value="dateAsc">Date (Oldest First)</option>
            <option value="dateDesc">Date (Newest First)</option>
        </select>
    </div>
    <div class="main-content" style="margin-top: 10px; color: #000000; border-radius: 20px">
        <table class="table" id="reportTable">
            <thead>
                <tr style="background-color: #1A554F; color: #FFFFFF;">
                    <th>Name</th>
                    <th>Category</th>
                    <th>Description</th>
                    <th>Expense Date</th>
                    <th>Amount</th>
                </tr>
            </thead>
            <tbody class="data" style="background-color: #FFFFFF; color: #000000;">
                @foreach (var item in Model.ExpenseViewModel)
                {
                    <tr data-toggle="modal" data-target="#expenseDetailModal"
                        data-id="@item.ExpenseId" data-title="@item.Title"
                        data-category="@item.CategoryId" data-amount="@item.Amount"
                        data-date="@item.DateCreated" data-description="@item.Description"
                        class="expense-row">

                        <td>@item.Title</td>
                        <td>@item.CategoryName</td>
                        <td>@item.Description</td>
                        <td>@item.DateCreated</td>
                        <td>@item.Amount</td>
                    </tr>
                }
            </tbody>
            <tfoot style="background-color: #f8f9fa; font-weight: bold;">
                <tr>
                    <td colspan="4" style="text-align: right;">Total Amount:</td>
                    <td id="totalAmount">0</td>
                </tr>
            </tfoot>
        </table>
    </div>

    <!-- Modal Structure -->
    <div class="modal fade" id="previewModal" tabindex="-1" role="dialog" aria-labelledby="previewModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="previewModalLabel">Expense Summary Preview</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="main-content-preview">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" onclick="generatePDF()" style="background-color: #1A554F; border-radius: 20px;">PDF</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <div id="paginationControls" class="d-flex justify-content-end mt-3"></div>


    @section Scripts {
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
        <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>

        <script>
            function loadPreviewContent() {
                const mainContent = document.querySelector('.main-content');
                const modalContent = document.querySelector('.main-content-preview');
                modalContent.innerHTML = '';
                modalContent.innerHTML = mainContent.innerHTML;
            }

            async function generatePDF() {
                const { jsPDF } = window.jspdf;
                const pdf = new jsPDF();

                const content = document.querySelector('.main-content-preview');

                await html2canvas(content, {
                    scale: 2
                }).then((canvas) => {
                    const imgData = canvas.toDataURL('image/png');
                    const imgWidth = 190; 
                    const pageHeight = pdf.internal.pageSize.height;
                    const imgHeight = canvas.height * imgWidth / canvas.width;

                    pdf.addImage(imgData, 'PNG', 10, 10, imgWidth, imgHeight);

                    const currentDate = new Date();
                    const footerText = `Generated on: ${currentDate.toLocaleString()}`;
                    pdf.setFontSize(10);
                    pdf.text(footerText, 10, pageHeight - 10);

                    pdf.save('Expense Summary.pdf');
                });
            }
        </script>

        <script>
            $(document).ready(function () {
                // Filter by Category
                $('#Filter').change(function () {
                    var selectedCategory = $(this).val();
                    $('#reportTable tbody tr').each(function () {
                        var categoryId = $(this).data('category');
                        if (selectedCategory === "" || categoryId == selectedCategory) {
                            $(this).show();
                        } else {
                            $(this).hide();
                        }
                    });
                });

                // Sort Table
                $('#Sort').change(function () {
                    var sortBy = $(this).val();
                    var rows = $('#reportTable tbody tr').get();

                    rows.sort(function (a, b) {
                        var valA, valB;

                        switch (sortBy) {
                            case 'titleAsc':
                                valA = $(a).data('title') || "";
                                valB = $(b).data('title') || "";
                                return valA.localeCompare(valB);
                            case 'titleDesc':
                                valA = $(a).data('title').toLowerCase();
                                valB = $(b).data('title').toLowerCase();
                                return valB.localeCompare(valA);
                            case 'amountAsc':
                                valA = parseFloat($(a).data('amount'));
                                valB = parseFloat($(b).data('amount'));
                                return valA - valB;
                            case 'amountDesc':
                                valA = parseFloat($(a).data('amount'));
                                valB = parseFloat($(b).data('amount'));
                                return valB - valA;
                            case 'dateAsc':
                                valA = parseDate($(a).data('date'));
                                valB = parseDate($(b).data('date'));
                                return valA - valB;
                            case 'dateDesc':
                                valA = parseDate($(a).data('date'));
                                valB = parseDate($(b).data('date'));
                                return valB - valA;
                            default:
                                return 0;
                        }
                    });

                    function parseDate(dateStr) {
                        var parts = dateStr.split('/');
                        var day = parseInt(parts[0], 10);
                        var month = parseInt(parts[1], 10) - 1;
                        var year = parseInt(parts[2], 10);
                        return new Date(year, month, day);
                    }

                    $.each(rows, function (index, row) {
                        $('#reportTable tbody').append(row);
                    });
                });
            });
        </script>

        <script>
            $(document).ready(function () {
                function calculateTotalAmount() {
                    let total = 0;
                    $('#reportTable tbody tr').each(function () {
                        const amount = parseFloat($(this).data('amount')) || 0;
                        total += amount;
                    });
                    $('#totalAmount').text(total.toFixed(2)); 
                }

                function displayPage(page) {
                    const rowsPerPage = 7; 
                    const rows = $('#reportTable tbody tr'); 
                    rows.hide(); 
                    const start = (page - 1) * rowsPerPage; 
                    const end = start + rowsPerPage; 
                    rows.slice(start, end).show(); 
                    generatePaginationButtons(page); 
                }

                function generatePaginationButtons(currentPage) {
                    const rowsPerPage = 7; 
                    const rows = $('#reportTable tbody tr');
                    const totalRows = rows.length; 
                    const totalPages = Math.ceil(totalRows / rowsPerPage); 

                    const paginationControls = $('#paginationControls');
                    paginationControls.empty(); 

                    // Previous Button
                    const prevDisabled = currentPage === 1 ? 'disabled' : '';
                    paginationControls.append(
                        `<button class="btn btn-secondary mr-1 pagination-btn" data-page="${currentPage - 1}" ${prevDisabled}>Previous</button>`
                    );

                    // Page Numbers
                    for (let i = 1; i <= totalPages; i++) {
                        const activeClass = i === currentPage ? 'active' : '';
                        paginationControls.append(
                            `<button class="pagination-btn ${activeClass}" data-page="${i}">${i}</button>`
                        );
                    }

                    // Next Button
                    const nextDisabled = currentPage === totalPages ? 'disabled' : '';
                    paginationControls.append(
                        `<button class="btn btn-secondary mr-1 pagination-btn" data-page="${currentPage + 1}" ${nextDisabled}>Next</button>`
                    );
                }

                // Handle pagination button clicks
                $('#paginationControls').on('click', '.pagination-btn', function () {
                    const page = parseInt($(this).data('page'), 10);
                    if (!isNaN(page)) {
                        displayPage(page);
                    }
                });

                // Calculate total on page load
                calculateTotalAmount();

                $('#Sort, #Filter, #dateStart, #dateEnd').on('change', function () {
                    calculateTotalAmount();
                });
                displayPage(1);
            });

        </script>

        <script>
            $(document).ready(function () {
                $('#dateStart, #dateEnd').on('change', function () {
                    var dateStart = $('#dateStart').val() ? parseISODate($('#dateStart').val()) : null;
                    var dateEnd = $('#dateEnd').val() ? parseISODate($('#dateEnd').val()) : null;

                    var hasData = false;

                    $('#reportTable tbody tr').each(function () {
                        var dateStr = $(this).data('date');
                        var expenseDate = parseDate(dateStr); 

                        if ((!dateStart || expenseDate >= dateStart) && (!dateEnd || expenseDate <= dateEnd)) {
                            $(this).show(); 
                            hasData = true;
                        } else {
                            $(this).hide(); 
                        }
                    });

                    if (!hasData) {
                        alert("No data available for the selected date range.");
                    }
                });

                function parseDate(dateStr) {
                    var parts = dateStr.split('/');
                    var day = parseInt(parts[0], 10);
                    var month = parseInt(parts[1], 10) - 1;
                    var year = parseInt(parts[2], 10);
                    return new Date(year, month, day);
                }

                function parseISODate(dateStr) {
                    var parts = dateStr.split('-');
                    var year = parseInt(parts[0], 10);
                    var month = parseInt(parts[1], 10) - 1; 
                    var day = parseInt(parts[2], 10);
                    return new Date(year, month, day);
                }
            });
        </script>
    }
</body>
